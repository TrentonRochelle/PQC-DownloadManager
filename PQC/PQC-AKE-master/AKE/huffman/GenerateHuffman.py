################################################################################
## 1. Feed a file with a bunch of numbers generated by the Gaussian Distribution.
## 2. Calculate their frequency.
## 3. Build Hauffman encoding based on number frequency.
## 4. Output Encoding
################################################################################


from IPython import embed
from collections import Counter

q = 12290 # q+1
filename = "D:\Thesis\example-X.txt"
freq = Counter()

lowest = 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001

for i in range(-q,q):
    freq[int(i)] += 1

## 1. Feed From File
for i in range(0,19):
    ff = filename.replace("X",str(i))
    print "Reading File:",ff
    with open(ff) as infile:
        for line in infile:
            freq[int(line)] += 1

print "Done!"
embed()        
### IRRELEVANT
# ## 2. Calculate their frequency.
# length = float(len(freq))
# for num in freq:
#     freq[num] = freq[num]/length
#     if (num < 60 and num > 0):
#         print num,"=",freq[num];
        

        
## 3. Build Hauffman Encoding
from heapq import *

class Node(object):
    left = None
    right = None
    item = None
    weight = 0
    
    def __init__(self, i, w):
        self.item = i
        self.weight = w

    def setChildren(self, ln, rn):
        self.left = ln
        self.right = rn
        #print "Attaching:",ln,rn," to ",self;

    def __repr__(self):
        return "(%s - %s) - %s _ %s" % (self.item, self.weight, self.left, self.right)

    def __cmp__(self, a):
        return cmp(self.weight, a.weight)
    
itemqueue = []
for num in freq:
    #print num,freq[num]
    itemqueue += [Node(num,freq[num])]


heapify(itemqueue)
while len(itemqueue) > 1:
    l = heappop(itemqueue)
    r = heappop(itemqueue)
    n = Node(None, r.weight+l.weight)
    n.setChildren(l,r)
    heappush(itemqueue, n)



def huffman():
    codes = {}
    def codeIt(s, node):
        
        if node is None: return;
        #print "At Node",node.item, node.left, node.right
        if node.item is not None:
            if not s:
                codes[node.item] = "0"
            else:
                codes[node.item] = s
        else:
            #print "   - Going to",node.left
            codeIt(s+"0", node.left)
            #print "   - Going to",node.right
            codeIt(s+"1", node.right)

    codeIt("",itemqueue[0])
    
    return codes

x = huffman()

print x[1]
print x[-2]
print x[58]
    
# filename = open("huffman.ser","w+")

# for i in range(-q,q):
#     filename.write(str(i)+" "+str(x[i])+"\n")

# filename.close()

    
    
embed() 






    
    
    
    
    
    
    
    
    
    
    
    
    